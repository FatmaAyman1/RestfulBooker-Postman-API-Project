{
	"info": {
		"_postman_id": "be63e670-ecb9-49ab-acf5-fa7e097c195b",
		"name": "Restful booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38225536"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var token = jsonData.token\r",
									"\r",
									"pm.environment.set(\"token\", token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check Response Schema include token \",function(){\r",
									"\t\tpm.expect(JSON.parse(responseBody)).to.have.property(\"token\");\r",
									"});        \r",
									"\r",
									"pm.test(\"Check token value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).token).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of token in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).token).to.equal(\"string\");\r",
									"})\r",
									"\r",
									"pm.test(\"Check username value in request not null\",function(){\r",
									"    pm.expect(JSON.parse(request.data).username).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check password value in request not null\",function(){\r",
									"    pm.expect(JSON.parse(request.data).password).to.not.equal(null);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetBooking",
			"item": [
				{
					"name": "All Booking Ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response body includes bookingid\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).category).to.have.property(\"bookingid\");\r",
									"}\r",
									"\r",
									"pm.test(\"Check bookingid value in response is not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check that Accept header is present\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Accept header contains 'application/json'\", function () {\r",
									"    let acceptHeader = pm.request.headers.get(\"Accept\");\r",
									"    pm.expect(acceptHeader).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									" pm.test(\"Check that response body includes firstname\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes lastname\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes totalprice\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes depositpaid\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"depositpaid\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes bookingdates\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes checkin\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"checkin\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes checkout\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"checkout\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes additionalneeds\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that firstname value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that lastname value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that totalprice value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that depositpaid value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that bookingdates value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkin value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).checkin).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkout value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).checkout).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that additionalneeds value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of firstname in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).firstname).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of lastname in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).lastname).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the value of totalprice is a number\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.totalprice).to.eql('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response data type of the depositpaid is boolean\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.depositpaid).to.eql('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of checkin in bookingdates in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).bookingdates.checkin).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of checkout in bookingdates in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).bookingdates.checkout).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of additionalneeds in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).additionalneeds).to.equal(\"string\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/1",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking ID By Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"check that response body includes bookingid\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).category).to.have.property(\"bookingid\");\r",
									"}\r",
									"\r",
									"pm.test(\"Check bookingid value in response is not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if bookingid in respnse body has number\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let array = jsonData; \r",
									"    array.forEach(function (item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        let hasNumber = false;\r",
									"        for (let key in item) {\r",
									"            if (typeof item[key] === 'number') {\r",
									"                hasNumber = true;\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        pm.expect(hasNumber).to.be.true;\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking?checkin=2019-01-30&checkout=2022-04-11",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2019-01-30"
								},
								{
									"key": "checkout",
									"value": "2022-04-11"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateBooking",
			"item": [
				{
					"name": "Create new booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check that Content-Type in header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check Response Schema include bookingid \",function(){\r",
									"\t\tpm.expect(JSON.parse(responseBody)).to.have.property(\"bookingid\");\r",
									"});  \r",
									"\r",
									"pm.test(\"Check Response Schema include booking \",function(){\r",
									"\t\tpm.expect(JSON.parse(responseBody)).to.have.property(\"booking\");\r",
									"}); \r",
									"\r",
									" pm.test(\"check booking response schema includes firstname\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"firstname\")\r",
									"}\r",
									"\r",
									"pm.test(\"check booking response schema includes lastname\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"lastname\")\r",
									"}\r",
									"\r",
									"pm.test(\"check booking response schema includes totalprice\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"totalprice\")\r",
									"}\r",
									"\r",
									"pm.test(\"check booking response schema includes depositpaid\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"depositpaid\")\r",
									"}\r",
									"\r",
									"pm.test(\"check booking response schema includes bookingdates\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"bookingdates\")\r",
									"}\r",
									"\r",
									"pm.test(\"check booking response schema includes checkin\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"checkin\")\r",
									"}\r",
									"\r",
									"pm.test(\"check booking response schema includes checkout\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"checkout\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check bookingid value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check booking value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).booking).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check firstname value of booking in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check lastname value of booking in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check totalprice value of booking in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check depositpaid value of booking in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check bookingdates value of booking in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check checkin value of booking in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).checkin).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check checkout value of booking in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).checkout).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check additionalneeds value of booking in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of firstname of booking in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).booking.firstname).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of lastname of booking in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).booking.lastname).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the value of bookingid is a number\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.bookingid).to.eql('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the value of totalprice in booking is a number\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.booking.totalprice).to.eql('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response data type of the depositpaid is boolean\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.booking.depositpaid).to.eql('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of checkin in bookingdates in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).booking.bookingdates.checkin).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of checkout in bookingdates in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).booking.bookingdates.checkout).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of additionalneeds in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).booking.additionalneeds).to.equal(\"string\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Fatma\",\r\n    \"lastname\" : \"Ayman\",\r\n    \"totalprice\" : 1600,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-09-01\",\r\n        \"checkout\" : \"2024-09-05\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking ID By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"check that response body includes bookingid\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).category).to.have.property(\"bookingid\");\r",
									"}\r",
									"\r",
									"pm.test(\"Check bookingid value in response is not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if bookingid in respnse body has number\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let array = jsonData; \r",
									"    array.forEach(function (item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        let hasNumber = false;\r",
									"        for (let key in item) {\r",
									"            if (typeof item[key] === 'number') {\r",
									"                hasNumber = true;\r",
									"                break;\r",
									"            }\r",
									"        }\r",
									"        pm.expect(hasNumber).to.be.true;\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking?firstname=Mary&lastname=Jackson",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Mary"
								},
								{
									"key": "lastname",
									"value": "Jackson"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UpdateBooking",
			"item": [
				{
					"name": "update booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check that Content-Type in header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Accept header is present\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Accept header contains 'application/json'\", function () {\r",
									"    let acceptHeader = pm.request.headers.get(\"Accept\");\r",
									"    pm.expect(acceptHeader).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									" pm.test(\"Check that response body includes firstname\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes lastname\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes totalprice\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes depositpaid\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"depositpaid\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes bookingdates\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes checkin\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"checkin\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes checkout\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"checkout\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes additionalneeds\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that firstname value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that lastname value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that totalprice value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that depositpaid value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that bookingdates value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkin value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).checkin).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkout value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).checkout).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that additionalneeds value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of firstname in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).firstname).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of lastname in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).lastname).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the value of totalprice is a number\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.totalprice).to.eql('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response data type of the depositpaid is boolean\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.depositpaid).to.eql('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of checkin in bookingdates in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).bookingdates.checkin).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of checkout in bookingdates in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).bookingdates.checkout).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of additionalneeds in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).additionalneeds).to.equal(\"string\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Fatma\",\r\n    \"lastname\" : \"Ayman\",\r\n    \"totalprice\" : 2000,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/1",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PartialUpdateBooking",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check that Content-Type in header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Accept header is present\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Check that Accept header contains 'application/json'\", function () {\r",
									"    let acceptHeader = pm.request.headers.get(\"Accept\");\r",
									"    pm.expect(acceptHeader).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									" pm.test(\"Check that response body includes firstname\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes lastname\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes totalprice\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes depositpaid\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody).booking).to.have.property(\"depositpaid\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes bookingdates\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"bookingdates\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes checkin\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"checkin\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes checkout\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"checkout\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that response body includes additionalneeds\"),function(){\r",
									"\tpm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"}\r",
									"\r",
									"pm.test(\"Check that firstname value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that lastname value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that totalprice value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that depositpaid value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that bookingdates value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkin value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).checkin).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkout value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).checkout).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that additionalneeds value in response not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of firstname in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).firstname).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of lastname in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).lastname).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the value of totalprice is a number\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.totalprice).to.eql('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response data type of the depositpaid is boolean\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.depositpaid).to.eql('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of checkin in bookingdates in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).bookingdates.checkin).to.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of checkout in bookingdates in response body is string\",function(){\r",
									"\tpm.expect(typeof JSON.parse(responseBody).bookingdates.checkout).to.equal(\"string\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Fatma\",\r\n    \"lastname\" : \"Ayman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/4",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteBooking",
			"item": [
				{
					"name": "deleteBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check thatStatus code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/7",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"7"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ping",
			"item": [
				{
					"name": "HealthCheck",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/ping",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}